name: 构建支持插件的Windows客户端 V2 (强制更新版)

on:
  workflow_dispatch:
    inputs:
      upload-artifact:
        description: '是否上传构建产物'
        type: boolean
        default: true
      build-type:
        description: '构建类型'
        type: choice
        options:
          - release
          - debug
        default: release
      enable-features:
        description: '启用的功能特性'
        type: string
        default: 'flutter,plugin_framework'

env:
  RUST_VERSION: "1.75"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.24.5"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  VCPKG_COMMIT_ID: "6f29f12e82a8293156836ad81cc9bf5af41fe836"
  VERSION: "1.4.1"
  BUILD_TYPE: ${{ github.event.inputs.build-type || 'release' }}
  ENABLE_FEATURES: ${{ github.event.inputs.enable-features || 'flutter,plugin_framework' }}

jobs:
  generate-bridge:
    name: 生成Flutter桥接代码 V2
    runs-on: ubuntu-22.04
    steps:
      - name: 检出源代码
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 安装Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: 强制修复Flutter依赖 V2
        run: |
          cd flutter
          echo "=== 强制修复Flutter依赖 V2 ==="
          
          # 显示当前pubspec.yaml内容
          echo "当前pubspec.yaml内容:"
          cat pubspec.yaml
          
          # 备份原始文件
          cp pubspec.yaml pubspec.yaml.backup
          
          # 强制添加flutter_rust_bridge_codegen依赖
          echo "强制添加flutter_rust_bridge_codegen依赖..."
          
          # 检查是否已有dev_dependencies节
          if grep -q "dev_dependencies:" pubspec.yaml; then
            # 在dev_dependencies节中添加
            sed -i '/dev_dependencies:/a\  flutter_rust_bridge_codegen: ^2.0.0' pubspec.yaml
          else
            # 创建dev_dependencies节
            echo "" >> pubspec.yaml
            echo "dev_dependencies:" >> pubspec.yaml
            echo "  flutter_rust_bridge_codegen: ^2.0.0" >> pubspec.yaml
          fi
          
          # 显示修改后的pubspec.yaml
          echo "修改后的pubspec.yaml:"
          cat pubspec.yaml
          
          # 清理并重新获取依赖
          echo "清理并重新获取依赖..."
          flutter clean
          flutter pub get
          
          # 验证依赖
          echo "验证依赖安装..."
          if flutter packages pub deps | grep -q "flutter_rust_bridge_codegen"; then
            echo "✓ flutter_rust_bridge_codegen依赖安装成功"
          else
            echo "✗ flutter_rust_bridge_codegen依赖安装失败"
            echo "尝试备用方案..."
            flutter pub add --dev flutter_rust_bridge_codegen
            flutter pub get
          fi
          
          cd ..
          echo "=== 强制修复完成 V2 ==="

      - name: 生成桥接代码 V2
        run: |
          cd flutter
          echo "=== 开始桥接代码生成 V2 ==="
          
          # 最终验证依赖
          echo "最终验证依赖..."
          flutter packages pub deps | grep flutter_rust_bridge_codegen || (echo "错误: flutter_rust_bridge_codegen依赖未找到" && exit 1)
          
          # 检查并创建API文件
          echo "检查API文件..."
          if [ ! -f "../src/api.rs" ]; then
            echo "创建示例API文件..."
            mkdir -p ../src
            echo '// 示例API文件，用于生成桥接代码' > ../src/api.rs
            echo '#[flutter_rust_bridge::bridge]' >> ../src/api.rs
            echo 'mod api {' >> ../src/api.rs
            echo '    pub fn hello_world() -> String {' >> ../src/api.rs
            echo '        "Hello from Rust!".to_string()' >> ../src/api.rs
            echo '    }' >> ../src/api.rs
            echo '    ' >> ../src/api.rs
            echo '    pub fn get_version() -> String {' >> ../src/api.rs
            echo '        "1.0.0".to_string()' >> ../src/api.rs
            echo '    }' >> ../src/api.rs
            echo '}' >> ../src/api.rs
          fi
          
          # 运行build_runner
          echo "运行build_runner..."
          flutter packages pub run build_runner build --delete-conflicting-outputs
          
          # 生成桥接代码
          echo "生成桥接代码..."
          flutter packages pub run flutter_rust_bridge_codegen \
            --rust-input ../src/api.rs \
            --dart-output lib/bridge_generated.dart \
            --c-output macos/Runner/bridge_generated.h \
            --dart-decl-output lib/bridge_definitions.dart \
            --wasm
          
          # 验证生成的文件
          echo "验证生成的文件..."
          ls -la lib/bridge_generated.dart || echo "警告: bridge_generated.dart未找到"
          ls -la ../src/bridge_generated.rs || echo "警告: bridge_generated.rs未找到"
          
          echo "=== 桥接代码生成完成 V2 ==="
          cd ..

      - name: 上传桥接代码产物
        uses: actions/upload-artifact@v4
        with:
          name: bridge-artifact-v2
          path: |
            src/bridge_generated.rs
            flutter/lib/bridge_generated.dart
            flutter/macos/Runner/bridge_generated.h
            flutter/lib/bridge_definitions.dart

  build-windows-plugin:
    name: 构建Windows插件客户端 V2
    needs: [generate-bridge]
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc
        vcpkg-triplet:
          - x64-windows-static

    steps:
      - name: 导出GitHub Actions缓存环境变量
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: 检出源代码
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 恢复桥接代码
        uses: actions/download-artifact@v4
        with:
          name: bridge-artifact-v2
          path: ./

      - name: 安装LLVM和Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: ${{ env.LLVM_VERSION }}

      - name: 安装Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: 替换为RustDesk自定义Flutter引擎
        run: |
          flutter doctor -v
          flutter precache --windows
          Invoke-WebRequest -Uri https://github.com/rustdesk/engine/releases/download/main/windows-x64-release.zip -OutFile windows-x64-release.zip
          Expand-Archive -Path windows-x64-release.zip -DestinationPath windows-x64-release
          mv -Force windows-x64-release/* C:/hostedtoolcache/windows/flutter/stable-${{ env.FLUTTER_VERSION }}-x64/bin/cache/artifacts/engine/windows-x64-release/

      - name: 应用Flutter补丁 (可选)
        shell: bash
        run: |
          if [ -f ".github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff" ]; then
            echo "应用Flutter补丁..."
            cp .github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff $(dirname $(dirname $(which flutter)))
            cd $(dirname $(dirname $(which flutter)))
            [[ "3.24.5" == ${{env.FLUTTER_VERSION}} ]] && git apply flutter_3.24.4_dropdown_menu_enableFilter.diff
          else
            echo "Flutter补丁文件不存在，跳过..."
          fi

      - name: 安装Rust工具链
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}
          components: "rustfmt"

      - name: 设置Rust缓存
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.target }}

      - name: 设置vcpkg和GitHub Actions二进制缓存
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: C:\vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      - name: 安装vcpkg依赖
        env:
          VCPKG_DEFAULT_HOST_TRIPLET: ${{ matrix.vcpkg-triplet }}
        run: |
          if ! $VCPKG_ROOT/vcpkg \
            install \
            --triplet ${{ matrix.vcpkg-triplet }} \
            --x-install-root="$VCPKG_ROOT/installed"; then
            find "${VCPKG_ROOT}/" -name "*.log" | while read -r _1; do
              echo "$_1:"
              echo "======"
              cat "$_1"
              echo "======"
              echo ""
            done
            exit 1
          fi
          head -n 100 "${VCPKG_ROOT}/buildtrees/ffmpeg/build-${{ matrix.vcpkg-triplet }}-rel-out.log" || true
        shell: bash

      - name: 构建插件
        run: |
          echo "构建插件: rd_ui_plugin"
          cd plugins/rd_ui_plugin
          cargo build --${{ env.BUILD_TYPE }} --target ${{ matrix.target }}
          cd ../..

      - name: 构建RustDesk主程序
        run: |
          echo "构建RustDesk主程序，启用特性: ${{ env.ENABLE_FEATURES }}"
          echo "构建类型: ${{ env.BUILD_TYPE }}"
          echo "目标平台: ${{ matrix.target }}"
          
          # 构建RustDesk
          python3 .\build.py --portable --hwcodec --flutter --vram --skip-portable-pack --features ${{ env.ENABLE_FEATURES }}
          mv ./flutter/build/windows/x64/runner/Release ./rustdesk

          # 下载usbmmidd_v2.zip并解压到./rustdesk
          Invoke-WebRequest -Uri https://github.com/rustdesk-org/rdev/releases/download/usbmmidd_v2/usbmmidd_v2.zip -OutFile usbmmidd_v2.zip
          Expand-Archive usbmmidd_v2.zip -DestinationPath .
          Remove-Item -Path usbmmidd_v2\Win32 -Recurse
          Remove-Item -Path "usbmmidd_v2\deviceinstaller64.exe", "usbmmidd_v2\deviceinstaller.exe", "usbmmidd_v2\usbmmidd.bat"
          mv -Force .\usbmmidd_v2 ./rustdesk

          # 下载打印机驱动文件并解压到./rustdesk
          try {
            Invoke-WebRequest -Uri https://github.com/rustdesk/hbb_common/releases/download/driver/rustdesk_printer_driver_v4-1.4.zip -OutFile rustdesk_printer_driver_v4-1.4.zip
            Invoke-WebRequest -Uri https://github.com/rustdesk/hbb_common/releases/download/driver/printer_driver_adapter.zip -OutFile printer_driver_adapter.zip
            Invoke-WebRequest -Uri https://github.com/rustdesk/hbb_common/releases/download/driver/sha256sums -OutFile sha256sums

            # 检查并移动文件
            $checksum_driver = (Select-String -Path .\sha256sums -Pattern '^([a-fA-F0-9]{64}) \*rustdesk_printer_driver_v4-1.4\.zip$').Matches.Groups[1].Value
            $downloadsum_driver = Get-FileHash -Path rustdesk_printer_driver_v4-1.4.zip -Algorithm SHA256
            $checksum_adapter = (Select-String -Path .\sha256sums -Pattern '^([a-fA-F0-9]{64}) \*rustdesk_printer_driver_v4-1.4\.zip$').Matches.Groups[1].Value
            $downloadsum_adapter = Get-FileHash -Path printer_driver_adapter.zip -Algorithm SHA256
            if ($checksum_driver -eq $downloadsum_driver.Hash -and $checksum_adapter -eq $downloadsum_adapter.Hash) {
                Write-Output "rustdesk_printer_driver_v4-1.4, checksums match, extract the file."
                Expand-Archive rustdesk_printer_driver_v4-1.4.zip -DestinationPath .
                mkdir ./rustdesk/drivers
                mv -Force .\rustdesk_printer_driver_v4-1.4 ./rustdesk/drivers/RustDeskPrinterDriver
                Expand-Archive printer_driver_adapter.zip -DestinationPath .
                mv -Force .\printer_driver_adapter.dll ./rustdesk
            } elseif ($checksum_driver -ne $downloadsum_driver.Hash) {
                Write-Output "rustdesk_printer_driver_v4-1.4, checksums do not match, ignore the file."
            } else {
                Write-Output "printer_driver_adapter.dll, checksums do not match, ignore the file."
            }
          } catch {
            Write-Output "Failed to download printer driver files: $_"
          }

          # 复制插件到rustdesk目录
          echo "复制插件文件到rustdesk目录"
          mkdir -Force ./rustdesk/plugins
          Copy-Item -Path "plugins/rd_ui_plugin/target/${{ matrix.target }}/${{ env.BUILD_TYPE }}/rd_ui_plugin.dll" -Destination "./rustdesk/plugins/" -Force
          Copy-Item -Path "plugins/rd_ui_plugin/config.json.example" -Destination "./rustdesk/plugins/rd_ui_plugin_config.json" -Force
          Copy-Item -Path "plugins/rd_ui_plugin/README.md" -Destination "./rustdesk/plugins/README.md" -Force

          echo "构建完成！"
          echo "构建类型: ${{ env.BUILD_TYPE }}"
          echo "启用特性: ${{ env.ENABLE_FEATURES }}"
          echo "目标平台: ${{ matrix.target }}"

      - name: 创建插件配置文件
        run: |
          echo "创建插件配置文件"
          echo '{"plugin_framework":{"enabled":true,"plugin_dir":"plugins","auto_load":true},"rd_ui_plugin":{"enabled":true,"config_file":"rd_ui_plugin_config.json"}}' | Out-File -FilePath "./rustdesk/plugin_config.json" -Encoding UTF8

      - name: 创建构建信息文件
        run: |
          echo "创建构建信息文件"
          $buildInfo = "构建信息:`n- 构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n- 构建类型: ${{ env.BUILD_TYPE }}`n- 启用特性: ${{ env.ENABLE_FEATURES }}`n- 目标平台: ${{ matrix.target }}`n- Rust版本: ${{ env.RUST_VERSION }}`n- Flutter版本: ${{ env.FLUTTER_VERSION }}`n- 版本: ${{ env.VERSION }}`n- 插件支持: 已启用`n- 插件列表:`n  - rd_ui_plugin (UI控制插件)`n- 构建方式: V2强制更新版工作流"
          $buildInfo | Out-File -FilePath "./rustdesk/build_info.txt" -Encoding UTF8

      - name: 打包构建产物
        run: |
          echo "打包构建产物"
          $timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'
          $archiveName = "rustdesk_windows_plugin_v2_${{ env.BUILD_TYPE }}_${{ matrix.target }}_$timestamp.zip"
          
          # 创建ZIP文件
          Compress-Archive -Path "./rustdesk/*" -DestinationPath "$archiveName" -Force
          
          echo "打包完成: $archiveName"
          echo "文件大小: $((Get-Item $archiveName).Length / 1MB) MB"

      - name: 上传构建产物
        if: ${{ github.event.inputs.upload-artifact != 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-plugin-v2-${{ env.BUILD_TYPE }}-${{ matrix.target }}
          path: |
            rustdesk/
            *.zip
          retention-days: 30

      - name: 显示构建摘要
        run: |
          echo "=== 构建摘要 V2 ==="
          echo "构建类型: ${{ env.BUILD_TYPE }}"
          echo "启用特性: ${{ env.ENABLE_FEATURES }}"
          echo "目标平台: ${{ matrix.target }}"
          echo "插件支持: 已启用"
          echo "插件数量: 1"
          echo "构建状态: 成功"
          echo "构建方式: V2强制更新版工作流"
          echo "=================="
