name: 构建支持插件的Windows客户端 (简化版)

on:
  workflow_dispatch:
    inputs:
      upload-artifact:
        description: '是否上传构建产物'
        type: boolean
        default: true
      build-type:
        description: '构建类型'
        type: choice
        options:
          - release
          - debug
        default: release

env:
  RUST_VERSION: "1.75"
  BUILD_TYPE: ${{ github.event.inputs.build-type || 'release' }}

jobs:
  build-windows-plugin:
    name: 构建Windows插件客户端
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc

    steps:
      - name: 检出源代码
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 安装Rust工具链
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: 设置Rust缓存
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.target }}

      - name: 构建插件
        run: |
          echo "构建插件: rd_ui_plugin"
          cd plugins/rd_ui_plugin
          cargo build --${{ env.BUILD_TYPE }} --target ${{ matrix.target }}
          cd ../..

      - name: 创建输出目录
        run: |
          mkdir -Force ./output
          mkdir -Force ./output/plugins

      - name: 复制构建产物
        run: |
          echo "复制构建产物到输出目录"
          
          # 复制插件
          Copy-Item -Path "plugins/rd_ui_plugin/target/${{ matrix.target }}/${{ env.BUILD_TYPE }}/rd_ui_plugin.dll" -Destination "./output/plugins/" -Force
          
          # 复制插件配置文件
          if (Test-Path "plugins/rd_ui_plugin/config.json.example") {
            Copy-Item -Path "plugins/rd_ui_plugin/config.json.example" -Destination "./output/plugins/rd_ui_plugin_config.json" -Force
          }

      - name: 创建插件配置文件
        run: |
          echo "创建插件配置文件"
          $configContent = '{"plugin_framework":{"enabled":true,"plugin_dir":"plugins","auto_load":true},"rd_ui_plugin":{"enabled":true,"config_file":"rd_ui_plugin_config.json"}}'
          $configContent | Out-File -FilePath "./output/plugin_config.json" -Encoding UTF8

      - name: 创建构建信息文件
        run: |
          echo "创建构建信息文件"
          $buildInfo = "构建信息:`n- 构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n- 构建类型: ${{ env.BUILD_TYPE }}`n- 目标平台: ${{ matrix.target }}`n- Rust版本: ${{ env.RUST_VERSION }}`n- 插件支持: 已启用`n- 插件列表:`n  - rd_ui_plugin (UI控制插件)`n`n注意: 这是一个插件构建包，需要配合支持插件框架的RustDesk主程序使用"
          $buildInfo | Out-File -FilePath "./output/build_info.txt" -Encoding UTF8

      - name: 创建使用说明
        run: |
          echo "创建使用说明文件"
          echo "# RustDesk 插件使用说明" > ./output/README.md
          echo "" >> ./output/README.md
          echo "## 文件说明" >> ./output/README.md
          echo "- rd_ui_plugin.dll: UI控制插件" >> ./output/README.md
          echo "- rd_ui_plugin_config.json: 插件配置文件" >> ./output/README.md
          echo "- plugin_config.json: 插件框架配置" >> ./output/README.md
          echo "" >> ./output/README.md
          echo "## 使用方法" >> ./output/README.md
          echo "1. 确保你的RustDesk支持插件框架 (启用plugin_framework特性)" >> ./output/README.md
          echo "2. 将plugins目录复制到RustDesk的安装目录" >> ./output/README.md
          echo "3. 将plugin_config.json复制到RustDesk的根目录" >> ./output/README.md
          echo "4. 重启RustDesk，插件将自动加载" >> ./output/README.md
          echo "" >> ./output/README.md
          echo "## 注意事项" >> ./output/README.md
          echo "- 此插件需要RustDesk 1.4.1或更高版本" >> ./output/README.md
          echo "- 需要启用plugin_framework特性" >> ./output/README.md
          echo "- 如果插件加载失败，请检查配置文件路径" >> ./output/README.md

      - name: 打包构建产物
        run: |
          echo "打包构建产物"
          $timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'
          $archiveName = "rustdesk_plugin_${{ env.BUILD_TYPE }}_${{ matrix.target }}_$timestamp.zip"
          
          # 创建ZIP文件
          Compress-Archive -Path "./output/*" -DestinationPath "$archiveName" -Force
          
          echo "打包完成: $archiveName"
          echo "文件大小: $((Get-Item $archiveName).Length / 1KB) KB"

      - name: 上传构建产物
        if: ${{ github.event.inputs.upload-artifact != 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-plugin-${{ env.BUILD_TYPE }}-${{ matrix.target }}
          path: |
            output/
            *.zip
          retention-days: 30

      - name: 显示构建摘要
        run: |
          echo "=== 构建摘要 ==="
          echo "构建类型: ${{ env.BUILD_TYPE }}"
          echo "目标平台: ${{ matrix.target }}"
          echo "插件支持: 已启用"
          echo "插件数量: 1"
          echo "构建状态: 成功"
          echo "=================="
          echo "注意: 这是一个插件构建包，需要配合支持插件框架的RustDesk主程序使用"
